{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum absolute value of a strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} minimum absolute value\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = nanminabs( 5, x, 2, 1 );\n* // returns 1.0\n*/\nfunction nanminabs( N, x, strideX, offsetX ) {\n\tvar min;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn abs( x[ offsetX ] );\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = abs( v );\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = abs( x[ ix ] );\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default nanminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Computes the minimum absolute value of a strided array, ignoring `NaN` values.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} minimum absolute value\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = nanminabs( 5, arraylike2object( x ), 2, 1 );\n* // returns 1.0\n*/\nfunction nanminabs( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[0];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn abs( get( xbuf, offsetX ) );\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = abs( v );\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = abs( get( xbuf, ix ) );\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default nanminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum absolute value of a strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} minimum absolute value\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanminabs( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction nanminabs( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default nanminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum absolute value of a strided array, ignoring `NaN` values.\n*\n* @module @stdlib/stats-base-nanminabs\n*\n* @example\n* import nanminabs from '@stdlib/stats-base-nanminabs';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanminabs( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import nanminabs from '@stdlib/stats-base-nanminabs';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = nanminabs.ndarray( 5, x, 2, 1 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],"names":["nanminabs","N","x","strideX","offsetX","min","ix","o","v","i","NaN","arraylike2object","accessorProtocol","xbuf","get","data","accessors","abs","isnan","ndarray","stride2offset","setReadOnly","main"],"mappings":";;qgBA6CA,SAASA,EAAWC,EAAGC,EAAGC,EAASC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKR,GAAK,EACT,OAAOS,IAGR,IADAH,EAAII,EAAkBT,IACfU,iBACN,OCRF,SAAoBX,EAAGC,EAAGC,EAASC,GAClC,IAAIS,EACAC,EACAT,EACAC,EACAE,EACAC,EAQJ,GALAI,EAAOX,EAAEa,KAGTD,EAAMZ,EAAEc,UAAU,GAEP,IAANf,GAAuB,IAAZE,EACf,OAAOc,EAAKH,EAAKD,EAAMT,IAGxB,IADAE,EAAKF,EACCK,EAAI,EAAGA,EAAIR,IAChBO,EAAIM,EAAKD,EAAMP,KACJE,EAFQC,IAKnBH,GAAMH,EAEP,GAAKM,IAAMR,EACV,OAAOS,IAIR,IAFAL,EAAMY,EAAKT,GACXC,GAAK,EACIA,EAAIR,EAAGQ,IAEfD,EAAIS,EAAKH,EAAKD,EADdP,GAAMH,IAEDe,EAAOV,IAGPA,EAAIH,IACRA,EAAMG,GAGR,OAAOH,CACR,CDjCSW,CAAWf,EAAGM,EAAGJ,EAASC,GAElC,GAAW,IAANH,GAAuB,IAAZE,EACf,OAAOc,EAAKf,EAAGE,IAGhB,IADAE,EAAKF,EACCK,EAAI,EAAGA,EAAIR,IAChBO,EAAIN,EAAGI,KACIE,EAFQC,IAKnBH,GAAMH,EAEP,GAAKM,IAAMR,EACV,OAAOS,IAIR,IAFAL,EAAMY,EAAKT,GACXC,GAAK,EACIA,EAAIR,EAAGQ,IAEfD,EAAIS,EAAKf,EADTI,GAAMH,IAEDe,EAAOV,IAGPA,EAAIH,IACRA,EAAMG,GAGR,OAAOH,CACR,CE5CA,SAASL,EAAWC,EAAGC,EAAGC,GACzB,OAAOgB,EAASlB,EAAGC,EAAGC,EAASiB,EAAenB,EAAGE,GAClD,CCOAkB,EAAAC,EAAA,UAAAH"}